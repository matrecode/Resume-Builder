import React, { useState, useEffect } from "react";
import { X } from "react-feather";
import styles from "./Editor.module.css";
import InputControl from "../InputControl/InputControl";
import BasicInfo from "./SectionBodies/BasicInfo/BasicInfo";
import WorkExperience from "./SectionBodies/WorkExp/WorkExperience";
import Projects from "./SectionBodies/Projects/Projects";
import Education from "./SectionBodies/Education/Education";
import Achievement from "./SectionBodies/Achievements/Achievement";
import Summary from "./SectionBodies/Summary/Summary";
import Others from "./SectionBodies/Others/Others";
const Editor = (props) => {
  // Recieving Props from body component
  const sections = props.sections;
  const information = props.information;

  // To manage state of every form section components use this state to get section keys and fetch all data accoding to section keys
  const [activeSectionKeys, setActiveSectionKeys] = useState(
    Object.keys(sections)[0]
  );

  // To manage the state of active information for multiple experiences and education
  const [activeInformation, setActiveInformation] = useState(
    information[sections[Object.keys(sections)[0]]]
  );

  // Prefilled Input Title state
  const [sectionTitle, setSectionTitle] = useState(
    sections[Object.keys(sections)[0]]
  );

  // To store the values which is getting from forms

  const [values, setValues] = useState({
    name: activeInformation?.detail?.name || "",
    title: activeInformation?.detail?.title || "",
    linkedin: activeInformation?.detail?.linkedin || "",
    github: activeInformation?.detail?.github || "",
    phone: activeInformation?.detail?.phone || "",
    email: activeInformation?.detail?.email || "",
  });

  // All form sectionbodies generated by this function
  const generateBody = () => {
    // Write switch cases for different bodies
    switch (sections[activeSectionKeys]) {
      case sections.basicInfo:
        // pass onchange to the child component
        return (
          <BasicInfo
            basicValues={values}
            onChange={(event) => {
              // getting the value with help of name attributes and value attribute
              const { name, value } = event.target;
              setValues((prevValues) => ({
                ...prevValues,
                [name]: value,
              }));
            }}
          />
        );
      case sections.workExp:
        return (
          <WorkExperience
            expValues={values}
            onChange={(event) => {
              // getting the value with help of name attributes and value attribute
              const { name, value } = event.target;
              setValues((prevValues) => ({
                ...prevValues,
                [name]: value,
              }));
            }}
          />
        );
      case sections.projects:
        return (
          <Projects
            projectValues={values}
            onChange={(event) => {
              // getting the value with help of name attributes and value attribute
              const { name, value } = event.target;
              setValues((prevValues) => ({
                ...prevValues,
                [name]: value,
              }));
            }}
          />
        );
      case sections.education:
        return (
          <Education
            eduValues={values}
            onChange={(event) => {
              // getting the value with help of name attributes and value attribute
              const { name, value } = event.target;
              setValues((prevValues) => ({
                ...prevValues,
                [name]: value,
              }));
            }}
          />
        );
      case sections.achievements:
        return (
          <Achievement
            achiValues={values}
            onChange={(event) => {
              // getting the value with help of name attributes and value attribute
              const { name, value } = event.target;
              setValues((prevValues) => ({
                ...prevValues,
                [name]: value,
              }));
            }}
          />
        );
      case sections.summary:
        return (
          <Summary
            sumValues={values}
            onChange={(event) => {
              // getting the value with help of name attributes and value attribute
              const { name, value } = event.target;
              setValues((prevValues) => ({
                ...prevValues,
                [name]: value,
              }));
            }}
          />
        );
      case sections.other:
        return (
          <Others
            otherValues={values}
            onChange={(event) => {
              // getting the value with help of name attributes and value attribute
              const { name, value } = event.target;
              setValues((prevValues) => ({
                ...prevValues,
                [name]: value,
              }));
            }}
          />
        );
      default:
        return null;
    }
  };

  const handleSubmission = () =>{
    switch (sections[activeSectionKeys]) {
      case sections.basicInfo:{
        
        const templateDetails = {
          name:values.name,
          title:values.title,
          linkedin:values.linkedin,
          github:values.github,
          email:values.email,
          phone:values.phone,
        }
        props.setCvInformation((prev)=>({
          ...prev, [sections.basicInfo]: {
            ...prev[sections.basicInfo], detail:templateDetails
          }
        }));
        break;
      }

      case sections.achievements:{
        
        const templateDetails = {
         description: values.description
        }
        props.setCvInformation((prev)=>({
          ...prev, [sections.basicInfo]: {
            ...prev[sections.basicInfo], detail:templateDetails
          }
        }));
        break;

      }

      default:
        return null


       
    }
  }
  // update the information that we recieve
  // All about to make chips dynamic
  // update function always depend pn the array whenever it change the update function execute
  useEffect(() => {
    const activeInfo = information[sections[activeSectionKeys]];
    setActiveInformation(activeInfo);
    setSectionTitle(sections[activeSectionKeys]);

    setValues({
      name: activeInfo?.detail?.name || "",
      title: activeInfo?.details ? activeInfo.details[0]?.title || "": activeInfo?.detail?.title || "",
      linkedin: activeInfo?.detail?.linkedin || "",
      github: activeInfo?.details ? activeInfo.details[0]?.github || "": activeInfo?.detail?.github || "",
      phone: activeInfo?.detail?.phone || "",
      email: activeInfo?.detail?.email || "",
      description: typeof activeInfo?.detail !== "object" ? activeInfo.detail : "",
      clgname: activeInfo?.details ? activeInfo.details[0]?.clgname || "": "",
      startdate: activeInfo?.details ? activeInfo.details[0]?.startdate || "": "",
      enddate: activeInfo?.details ? activeInfo.details[0]?.enddate || "": "",
      // description:activeInfo?.detail?.description || "",
      overview:activeInfo?.details ? activeInfo.details[0]?.overview || "": "",
      deploylink:activeInfo?.details ? activeInfo.details[0]?.deploylink || "": "",
      companyname: activeInfo?.details ? activeInfo.details[0]?.companyname || "": "",
      certlink: activeInfo?.details ? activeInfo.details[0]?.certlink || "": "",
      location: activeInfo?.details ? activeInfo.details[0]?.location || "": "",
      
    })
  }, [activeSectionKeys, information, sections]);

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        {/* ? chaining methods if the left portion is nullish then it will not proceed with map */}
        {Object.keys(sections)?.map((key) => (
          <div
            className={`${styles.section} ${
              activeSectionKeys === key ? styles.active : ""
            }`}
            key={key}
            onClick={() => setActiveSectionKeys(key)}
          >
            {sections[key]}
          </div>
        ))}
      </div>
      <div className={styles.body}>
        <InputControl
          label="Title"
          placeholder="Enter Sectioon Title"
          value={sectionTitle}
          onChange={(event) => setSectionTitle(event.target.value)}
        />
        <div className={styles.chips}>
          {activeInformation?.details
            ? activeInformation?.details?.map((item, index) => {
                return (
                  <div className={styles.chip} key={item.title + index}>
                    <p>
                      {sections[activeSectionKeys]} {index + 1}
                    </p>
                    <X />
                  </div>
                );
              })
            : ""}
        </div>
        {generateBody()}
        <button onClick={handleSubmission}>Save</button>
      </div>
    </div>
  );
};

export default Editor;
