import React, { useState, useEffect } from "react";
import { X } from "react-feather";
import styles from "./Editor.module.css";
import InputControl from "../InputControl/InputControl";
import BasicInfo from "./SectionBodies/BasicInfo/BasicInfo";
import WorkExperience from "./SectionBodies/WorkExp/WorkExperience";
import Projects from "./SectionBodies/Projects/Projects";
import Education from "./SectionBodies/Education/Education";
import Achievement from "./SectionBodies/Achievements/Achievement";
import Summary from "./SectionBodies/Summary/Summary";
import Others from "./SectionBodies/Others/Others";
const Editor = (props) => {
  // Recieving Props from body component
  const sections = props.sections;
  const information = props.information;

  // To manage state of every form section components use this state to get section keys and fetch all data accoding to section keys
  const [activeSectionKeys, setActiveSectionKeys] = useState(
    Object.keys(sections)[0]
  );

  // To manage the state of active information for multiple experiences and education
  const [activeInformation, setActiveInformation] = useState(
    information[sections[Object.keys(sections)[0]]]
  );

  // Prefilled Input Title state
  const [sectionTitle, setSectionTitle] = useState(
    sections[Object.keys(sections)[0]]
  );

  // To store the values which is getting from forms

  const [values, setValues] = useState({
    name:activeInformation?.detail?.name || "",
    title:activeInformation?.detail?.title || "",
    linkedin:activeInformation?.detail?.linkedin || "",
    github:activeInformation?.detail?.github || "",
    phone:activeInformation?.detail?.phone || "",
    email:activeInformation?.detail?.email || "",
  })

  // All form sectionbodies generated by this function
  const generateBody = () => {
    // Write switch cases for different bodies
    switch (sections[activeSectionKeys]) {
      case sections.basicInfo:
        return <BasicInfo basicValues={values}/>;
      case sections.workExp:
        return <WorkExperience expValues={values} />;
      case sections.projects:
        return <Projects projectValues={values}/>;
      case sections.education:
        return <Education eduValues={values}/>;
      case sections.achievements:
        return <Achievement achiValues={values}/>;
      case sections.summary:
        return <Summary sumValues={values}/>;
      case sections.other:
        return <Others otherValues={values}/>;
      default:
        return null;
    }
  };

  // update the information that we recieve
  // All about to make chips dynamic
  // update function always depend pn the array whenever it change the update function execute
  useEffect(() => {
    setActiveInformation(information[sections[activeSectionKeys]]);
    setSectionTitle(sections[activeSectionKeys]);
  }, [activeSectionKeys, information, sections]);

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        {/* ? chaining methods if the left portion is nullish then it will not proceed with map */}
        {Object.keys(sections)?.map((key) => (
          <div
            className={`${styles.section} ${
              activeSectionKeys === key ? styles.active : ""
            }`}
            key={key}
            onClick={() => setActiveSectionKeys(key)}
          >
            {sections[key]}
          </div>
        ))}
      </div>
      <div className={styles.body}>
        <InputControl
          label="Title"
          placeholder="Enter Sectioon Title"
          value={sectionTitle}
          onChange={(event)=>setSectionTitle(event.target.value)}
        />
        <div className={styles.chips}>
          {activeInformation?.details
            ? activeInformation?.details?.map((item, index) => {
                return (
                  <div className={styles.chip} key={item.title + index}>
                    <p>
                      {sections[activeSectionKeys]} {index + 1}
                    </p>
                    <X />
                  </div>
                );
              })
            : ""}
        </div>
        {generateBody()}
        <button>Save</button>
      </div>
    </div>
  );
};

export default Editor;
